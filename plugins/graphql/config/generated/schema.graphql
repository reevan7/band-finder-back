input createProfilInput {
  data: ProfilInput
}

type createProfilPayload {
  profil: Profil
}

input createRechercheInput {
  data: RechercheInput
}

type createRecherchePayload {
  recherche: Recherche
}

input createRoleInput {
  data: RoleInput
}

type createRolePayload {
  role: UsersPermissionsRole
}

input createUserInput {
  data: UserInput
}

type createUserPayload {
  user: UsersPermissionsUser
}

input createUsersInput {
  data: UsersInput
}

type createUsersPayload {
  user: Users
}

"""
The `DateTime` scalar represents a date and time following the ISO 8601 standard
"""
scalar DateTime

input deleteProfilInput {
  where: InputID
}

type deleteProfilPayload {
  profil: Profil
}

input deleteRechercheInput {
  where: InputID
}

type deleteRecherchePayload {
  recherche: Recherche
}

input deleteRoleInput {
  where: InputID
}

type deleteRolePayload {
  role: UsersPermissionsRole
}

input deleteUserInput {
  where: InputID
}

type deleteUserPayload {
  user: UsersPermissionsUser
}

input deleteUsersInput {
  where: InputID
}

type deleteUsersPayload {
  user: Users
}

input FileInput {
  name: String!
  hash: String!
  sha256: String
  ext: String
  mime: String!
  size: String!
  url: String!
  provider: String!
  public_id: String
  related: [ID]
}

input InputID {
  id: ID!
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

union Morph = UsersPermissionsMe | UsersPermissionsMeRole | Profil | createProfilPayload | updateProfilPayload | deleteProfilPayload | ProfilConnection | ProfilAggregator | ProfilAggregatorSum | ProfilAggregatorAvg | ProfilAggregatorMin | ProfilAggregatorMax | ProfilGroupBy | ProfilConnection_id | ProfilConnectionCreatedAt | ProfilConnectionUpdatedAt | ProfilConnectionNom | ProfilConnectionPrenom | ProfilConnectionDescription | ProfilConnectionAge | ProfilConnectionStyle | ProfilConnectionInspiration | ProfilConnectionPhoto_profil | ProfilConnectionUsers | ProfilConnectionLocalisation | ProfilConnectionInstrument | Recherche | createRecherchePayload | updateRecherchePayload | deleteRecherchePayload | RechercheConnection | RechercheAggregator | RechercheGroupBy | RechercheConnection_id | RechercheConnectionCreatedAt | RechercheConnectionUpdatedAt | RechercheConnectionInstrument_recherche | RechercheConnectionStyle_recherche | RechercheConnectionAge_recherche | RechercheConnectionExperience_recherche | RechercheConnectionLocalisation_recherche | Users | createUsersPayload | updateUsersPayload | deleteUsersPayload | UsersConnection | UsersAggregator | UsersGroupBy | UsersConnection_id | UsersConnectionCreatedAt | UsersConnectionUpdatedAt | UsersConnectionEmail | UsersConnectionMdp | UsersConnectionProfil | UploadFile | UploadFileConnection | UploadFileAggregator | UploadFileGroupBy | UploadFileConnection_id | UploadFileConnectionCreatedAt | UploadFileConnectionUpdatedAt | UploadFileConnectionName | UploadFileConnectionHash | UploadFileConnectionSha256 | UploadFileConnectionExt | UploadFileConnectionMime | UploadFileConnectionSize | UploadFileConnectionUrl | UploadFileConnectionProvider | UploadFileConnectionPublic_id | UsersPermissionsPermission | UsersPermissionsRole | createRolePayload | updateRolePayload | deleteRolePayload | UsersPermissionsRoleConnection | UsersPermissionsRoleAggregator | UsersPermissionsRoleGroupBy | UsersPermissionsRoleConnection_id | UsersPermissionsRoleConnectionName | UsersPermissionsRoleConnectionDescription | UsersPermissionsRoleConnectionType | UsersPermissionsUser | createUserPayload | updateUserPayload | deleteUserPayload | UsersPermissionsUserConnection | UsersPermissionsUserAggregator | UsersPermissionsUserGroupBy | UsersPermissionsUserConnection_id | UsersPermissionsUserConnectionUsername | UsersPermissionsUserConnectionEmail | UsersPermissionsUserConnectionProvider | UsersPermissionsUserConnectionConfirmed | UsersPermissionsUserConnectionBlocked | UsersPermissionsUserConnectionRole

type Mutation {
  createProfil(input: createProfilInput): createProfilPayload
  updateProfil(input: updateProfilInput): updateProfilPayload
  deleteProfil(input: deleteProfilInput): deleteProfilPayload
  createRecherche(input: createRechercheInput): createRecherchePayload
  updateRecherche(input: updateRechercheInput): updateRecherchePayload
  deleteRecherche(input: deleteRechercheInput): deleteRecherchePayload
  createUsers(input: createUsersInput): createUsersPayload
  updateUsers(input: updateUsersInput): updateUsersPayload
  deleteUsers(input: deleteUsersInput): deleteUsersPayload

  """Create a new role"""
  createRole(input: createRoleInput): createRolePayload

  """Update an existing role"""
  updateRole(input: updateRoleInput): updateRolePayload

  """Delete an existing role"""
  deleteRole(input: deleteRoleInput): deleteRolePayload
  createUser(input: createUserInput): createUserPayload
  updateUser(input: updateUserInput): updateUserPayload
  deleteUser(input: deleteUserInput): deleteUserPayload
  upload(refId: ID, ref: String, source: String, file: Upload!): UploadFile!
}

"""Page profil """
type Profil {
  _id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  nom: String
  prenom: String
  description: String
  age: Int
  style: String
  inspiration: String
  photo_profil: UploadFile
  users: Users
  localisation: String
  instrument: String
}

type ProfilAggregator {
  count: Int
  sum: ProfilAggregatorSum
  avg: ProfilAggregatorAvg
  min: ProfilAggregatorMin
  max: ProfilAggregatorMax
}

type ProfilAggregatorAvg {
  age: Float
}

type ProfilAggregatorMax {
  age: Float
}

type ProfilAggregatorMin {
  age: Float
}

type ProfilAggregatorSum {
  age: Float
}

type ProfilConnection {
  values: [Profil]
  groupBy: ProfilGroupBy
  aggregate: ProfilAggregator
}

type ProfilConnection_id {
  key: ID
  connection: ProfilConnection
}

type ProfilConnectionAge {
  key: Int
  connection: ProfilConnection
}

type ProfilConnectionCreatedAt {
  key: DateTime
  connection: ProfilConnection
}

type ProfilConnectionDescription {
  key: String
  connection: ProfilConnection
}

type ProfilConnectionInspiration {
  key: String
  connection: ProfilConnection
}

type ProfilConnectionInstrument {
  key: String
  connection: ProfilConnection
}

type ProfilConnectionLocalisation {
  key: String
  connection: ProfilConnection
}

type ProfilConnectionNom {
  key: String
  connection: ProfilConnection
}

type ProfilConnectionPhoto_profil {
  key: ID
  connection: ProfilConnection
}

type ProfilConnectionPrenom {
  key: String
  connection: ProfilConnection
}

type ProfilConnectionStyle {
  key: String
  connection: ProfilConnection
}

type ProfilConnectionUpdatedAt {
  key: DateTime
  connection: ProfilConnection
}

type ProfilConnectionUsers {
  key: ID
  connection: ProfilConnection
}

type ProfilGroupBy {
  _id: [ProfilConnection_id]
  createdAt: [ProfilConnectionCreatedAt]
  updatedAt: [ProfilConnectionUpdatedAt]
  nom: [ProfilConnectionNom]
  prenom: [ProfilConnectionPrenom]
  description: [ProfilConnectionDescription]
  age: [ProfilConnectionAge]
  style: [ProfilConnectionStyle]
  inspiration: [ProfilConnectionInspiration]
  photo_profil: [ProfilConnectionPhoto_profil]
  users: [ProfilConnectionUsers]
  localisation: [ProfilConnectionLocalisation]
  instrument: [ProfilConnectionInstrument]
}

input ProfilInput {
  nom: String
  prenom: String
  description: String
  age: Int
  style: String
  inspiration: String
  photo_profil: ID
  users: ID
  localisation: String
  instrument: String
}

type Query {
  profil(id: ID!): Profil
  profils(sort: String, limit: Int, start: Int, where: JSON): [Profil]
  profilsConnection(sort: String, limit: Int, start: Int, where: JSON): ProfilConnection
  recherche(id: ID!): Recherche
  recherches(sort: String, limit: Int, start: Int, where: JSON): [Recherche]
  recherchesConnection(sort: String, limit: Int, start: Int, where: JSON): RechercheConnection
  user(id: ID!): UsersPermissionsUser
  users(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsUser]
  usersConnection(sort: String, limit: Int, start: Int, where: JSON): UsersPermissionsUserConnection
  files(sort: String, limit: Int, start: Int, where: JSON): [UploadFile]
  filesConnection(sort: String, limit: Int, start: Int, where: JSON): UploadFileConnection
  role(id: ID!): UsersPermissionsRole

  """
  Retrieve all the existing roles. You can't apply filters on this query.
  """
  roles(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsRole]
  rolesConnection(sort: String, limit: Int, start: Int, where: JSON): UsersPermissionsRoleConnection
  me: UsersPermissionsMe
}

type Recherche {
  _id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  instrument_recherche: String
  style_recherche: String
  age_recherche: String
  experience_recherche: String
  localisation_recherche: String
}

type RechercheAggregator {
  count: Int
}

type RechercheConnection {
  values: [Recherche]
  groupBy: RechercheGroupBy
  aggregate: RechercheAggregator
}

type RechercheConnection_id {
  key: ID
  connection: RechercheConnection
}

type RechercheConnectionAge_recherche {
  key: String
  connection: RechercheConnection
}

type RechercheConnectionCreatedAt {
  key: DateTime
  connection: RechercheConnection
}

type RechercheConnectionExperience_recherche {
  key: String
  connection: RechercheConnection
}

type RechercheConnectionInstrument_recherche {
  key: String
  connection: RechercheConnection
}

type RechercheConnectionLocalisation_recherche {
  key: String
  connection: RechercheConnection
}

type RechercheConnectionStyle_recherche {
  key: String
  connection: RechercheConnection
}

type RechercheConnectionUpdatedAt {
  key: DateTime
  connection: RechercheConnection
}

type RechercheGroupBy {
  _id: [RechercheConnection_id]
  createdAt: [RechercheConnectionCreatedAt]
  updatedAt: [RechercheConnectionUpdatedAt]
  instrument_recherche: [RechercheConnectionInstrument_recherche]
  style_recherche: [RechercheConnectionStyle_recherche]
  age_recherche: [RechercheConnectionAge_recherche]
  experience_recherche: [RechercheConnectionExperience_recherche]
  localisation_recherche: [RechercheConnectionLocalisation_recherche]
}

input RechercheInput {
  instrument_recherche: String
  style_recherche: String
  age_recherche: String
  experience_recherche: String
  localisation_recherche: String
}

input RoleInput {
  name: String!
  description: String
  type: String
  permissions: [ID]
  users: [ID]
}

input updateProfilInput {
  where: InputID
  data: ProfilInput
}

type updateProfilPayload {
  profil: Profil
}

input updateRechercheInput {
  where: InputID
  data: RechercheInput
}

type updateRecherchePayload {
  recherche: Recherche
}

input updateRoleInput {
  where: InputID
  data: RoleInput
}

type updateRolePayload {
  role: UsersPermissionsRole
}

input updateUserInput {
  where: InputID
  data: UserInput
}

type updateUserPayload {
  user: UsersPermissionsUser
}

input updateUsersInput {
  where: InputID
  data: UsersInput
}

type updateUsersPayload {
  user: Users
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

type UploadFile {
  _id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  hash: String!
  sha256: String
  ext: String
  mime: String!
  size: String!
  url: String!
  provider: String!
  public_id: String
  related(sort: String, limit: Int, start: Int, where: JSON): [Morph]
}

type UploadFileAggregator {
  count: Int
}

type UploadFileConnection {
  values: [UploadFile]
  groupBy: UploadFileGroupBy
  aggregate: UploadFileAggregator
}

type UploadFileConnection_id {
  key: ID
  connection: UploadFileConnection
}

type UploadFileConnectionCreatedAt {
  key: DateTime
  connection: UploadFileConnection
}

type UploadFileConnectionExt {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionHash {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionMime {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionName {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionProvider {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionPublic_id {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionSha256 {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionSize {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionUpdatedAt {
  key: DateTime
  connection: UploadFileConnection
}

type UploadFileConnectionUrl {
  key: String
  connection: UploadFileConnection
}

type UploadFileGroupBy {
  _id: [UploadFileConnection_id]
  createdAt: [UploadFileConnectionCreatedAt]
  updatedAt: [UploadFileConnectionUpdatedAt]
  name: [UploadFileConnectionName]
  hash: [UploadFileConnectionHash]
  sha256: [UploadFileConnectionSha256]
  ext: [UploadFileConnectionExt]
  mime: [UploadFileConnectionMime]
  size: [UploadFileConnectionSize]
  url: [UploadFileConnectionUrl]
  provider: [UploadFileConnectionProvider]
  public_id: [UploadFileConnectionPublic_id]
}

input UserInput {
  username: String!
  email: String!
  provider: String
  confirmed: Boolean
  blocked: Boolean
  role: ID
}

"""table des utilisateurs"""
type Users {
  _id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  email: String
  mdp: String
  profil: Profil
}

type UsersAggregator {
  count: Int
}

type UsersConnection {
  values: [Users]
  groupBy: UsersGroupBy
  aggregate: UsersAggregator
}

type UsersConnection_id {
  key: ID
  connection: UsersConnection
}

type UsersConnectionCreatedAt {
  key: DateTime
  connection: UsersConnection
}

type UsersConnectionEmail {
  key: String
  connection: UsersConnection
}

type UsersConnectionMdp {
  key: String
  connection: UsersConnection
}

type UsersConnectionProfil {
  key: ID
  connection: UsersConnection
}

type UsersConnectionUpdatedAt {
  key: DateTime
  connection: UsersConnection
}

type UsersGroupBy {
  _id: [UsersConnection_id]
  createdAt: [UsersConnectionCreatedAt]
  updatedAt: [UsersConnectionUpdatedAt]
  email: [UsersConnectionEmail]
  mdp: [UsersConnectionMdp]
  profil: [UsersConnectionProfil]
}

input UsersInput {
  email: String
  mdp: String
  profil: ID
}

type UsersPermissionsMe {
  _id: ID!
  username: String!
  email: String!
  confirmed: Boolean
  blocked: Boolean
  role: UsersPermissionsMeRole
}

type UsersPermissionsMeRole {
  _id: ID!
  name: String!
  description: String
  type: String
}

type UsersPermissionsPermission {
  _id: ID!
  type: String!
  controller: String!
  action: String!
  enabled: Boolean!
  policy: String
  role: UsersPermissionsRole
}

type UsersPermissionsRole {
  _id: ID!
  name: String!
  description: String
  type: String
  permissions(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsPermission]
  users(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsUser]
}

type UsersPermissionsRoleAggregator {
  count: Int
}

type UsersPermissionsRoleConnection {
  values: [UsersPermissionsRole]
  groupBy: UsersPermissionsRoleGroupBy
  aggregate: UsersPermissionsRoleAggregator
}

type UsersPermissionsRoleConnection_id {
  key: ID
  connection: UsersPermissionsRoleConnection
}

type UsersPermissionsRoleConnectionDescription {
  key: String
  connection: UsersPermissionsRoleConnection
}

type UsersPermissionsRoleConnectionName {
  key: String
  connection: UsersPermissionsRoleConnection
}

type UsersPermissionsRoleConnectionType {
  key: String
  connection: UsersPermissionsRoleConnection
}

type UsersPermissionsRoleGroupBy {
  _id: [UsersPermissionsRoleConnection_id]
  name: [UsersPermissionsRoleConnectionName]
  description: [UsersPermissionsRoleConnectionDescription]
  type: [UsersPermissionsRoleConnectionType]
}

type UsersPermissionsUser {
  _id: ID!
  username: String!
  email: String!
  provider: String
  confirmed: Boolean
  blocked: Boolean
  role: UsersPermissionsRole
}

type UsersPermissionsUserAggregator {
  count: Int
}

type UsersPermissionsUserConnection {
  values: [UsersPermissionsUser]
  groupBy: UsersPermissionsUserGroupBy
  aggregate: UsersPermissionsUserAggregator
}

type UsersPermissionsUserConnection_id {
  key: ID
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionBlocked {
  key: Boolean
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionConfirmed {
  key: Boolean
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionEmail {
  key: String
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionProvider {
  key: String
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionRole {
  key: ID
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionUsername {
  key: String
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserGroupBy {
  _id: [UsersPermissionsUserConnection_id]
  username: [UsersPermissionsUserConnectionUsername]
  email: [UsersPermissionsUserConnectionEmail]
  provider: [UsersPermissionsUserConnectionProvider]
  confirmed: [UsersPermissionsUserConnectionConfirmed]
  blocked: [UsersPermissionsUserConnectionBlocked]
  role: [UsersPermissionsUserConnectionRole]
}
